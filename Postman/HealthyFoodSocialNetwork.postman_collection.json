{
	"info": {
		"_postman_id": "332c6747-509a-497d-88ff-7e3c10ffc602",
		"name": "HealthyFoodSocialNetwork",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Categories",
			"item": [
				{
					"name": "AuthenticationCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b4bdeca-f289-4270-ad26-f9ce903a5786",
								"exec": [
									"pm.collectionVariables.set('SessionCookie', pm.cookies.get(\"JSESSIONID\"));\r",
									"\r",
									"console.log(pm.cookies.get(\"JSESSIONID\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{Admin_UserName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{Admin_Pass}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5e45a96-3534-4799-a75b-615daa192d86",
								"exec": [
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// pm.test(\"Assert that Categorie ID is greater than 0\", function () {\r",
									"//     pm.expect(jsonData.id).not.eql(0);\r",
									"// });\r",
									"\r",
									"var data = JSON.parse(responseBody); \r",
									"\r",
									"for (count = 0; count < data.length; count++)\r",
									"{\r",
									"    var userID = data[count].id;\r",
									"    pm.test(\"Assert that the user ID is not 0\", function () {\r",
									"    pm.expect(userID).to.greaterThan(0);\r",
									"    });\r",
									"\r",
									"    var category = data[count].category;\r",
									"    pm.test(\"Assert that the category name is a string\", function () {\r",
									"    pm.expect(category).to.be.a('string');\r",
									"    });\r",
									"\r",
									"};"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "827b2a1d-988e-4241-9b68-883dd951b5e8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/categories",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2518399-36a0-4a83-a3c0-328d459814ad",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Assert that Categorie Name is string\", function () {\r",
									"    pm.expect(jsonData.category).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Assert that Categorie ID is greater than 0\", function () {\r",
									"    pm.expect(jsonData.id).not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Assert that picture with png format is upload\", function () {\r",
									"    pm.expect(jsonData.emoji).to.include(\"png\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"CategoryName\", jsonData.category);\r",
									"pm.environment.get(\"CategoryName\");\r",
									"\r",
									"pm.environment.set(\"CategoryID\", jsonData.id);\r",
									"pm.environment.get(\"CategoryID\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f1d39c3f-8d29-46dc-a9ef-c4dd3e79d8ba",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "category",
									"type": "file",
									"src": "categoryR.json"
								},
								{
									"key": "file",
									"type": "file",
									"src": "rakija.png"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/categories",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e164b0e-3c73-4942-9a29-ec2de64ba636",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Assert that ID is the same and is not changed\", function () {\r",
									"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"CategoryID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Assert that category name is changed\", function () {\r",
									"    pm.expect(jsonData.category).not.eql(pm.collectionVariables.get(\"CategoryName\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "60ef7ac4-77f8-424e-981a-4396f75daf2b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "category",
									"type": "file",
									"src": "REcategory.json"
								},
								{
									"key": "file",
									"type": "file",
									"src": "rakija.png"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/categories/{{CategoryID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"categories",
								"{{CategoryID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfd8fbff-4fe0-45ce-b6e4-653641911851",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Assert that CategorieID of deleted category is not exist in the list of categories\", function () {\r",
									"    pm.expect(jsonData.id).not.eql(pm.collectionVariables.get(\"CategoryID\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fbc3d48a-afaa-40ab-acdd-939f23f1f01e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"id\": \"{{CategoryID}}\"\r\n}",
							"options": {
								"formdata": {},
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/categories/{{CategoryID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"categories",
								"{{CategoryID}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "AuthenticationComments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2f8351d-c52d-485e-b8e5-925d20fd6206",
								"exec": [
									"pm.collectionVariables.set('SessionCookie', pm.cookies.get(\"JSESSIONID\"));\r",
									"\r",
									"console.log(pm.cookies.get(\"JSESSIONID\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{Admin_UserName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{Admin_Pass}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCommentByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1282d7df-817f-4c4d-897a-4a8ac1d1e088",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Assert that comment is not empty\", function () {\r",
									"        pm.expect(jsonData.description).not.null;\r",
									"});\r",
									"pm.test(\"Assert that there is timestamp and is not empty\", function () {\r",
									"    pm.expect(jsonData.timestamp).not.null;\r",
									"});\r",
									"pm.collectionVariables.set(\"CommentDesc\", jsonData.description);\r",
									"pm.collectionVariables.set(\"CommentedPostID\", jsonData.post.id);\r",
									"pm.collectionVariables.set(\"CommentCreatorID\", jsonData.creator.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/comments/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateComment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "738d51fe-3041-480e-87e5-eb6244b0670d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Assert that changed comment is for the same post\", function () {\r",
									"    pm.expect(jsonData.post.id).to.equal(pm.collectionVariables.get(\"CommentedPostID\"));\r",
									"});\r",
									"pm.test(\"Assert that comment is changed\", function () {\r",
									"    pm.expect(jsonData.description).not.equal(pm.collectionVariables.get(\"CommentDesc\"))\r",
									"});\r",
									"pm.test(\"Assert that the same user is made changes of comment\", function () {\r",
									"    pm.expect(jsonData.creator.id).to.equal(pm.collectionVariables.get(\"CommentCreatorID\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "303cdfe7-e8be-4915-85e1-e3ec0f6a7727",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment\": \"{{$randomLoremSentence}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/comments/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "ShowCommentsLikes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1eb11c9-a234-4662-9a50-3e74e2d11ffb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Assert that response body is not empty\", function () {\r",
									"    var res = (_.isEmpty(responseBody));\r",
									"    pm.expect(res).to.be.false\r",
									"})\r",
									"pm.collectionVariables.set(\"CountOfCommentLikes\", parseInt(responseBody))\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/comments/2/likes",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"comments",
								"2",
								"likes"
							]
						}
					},
					"response": []
				},
				{
					"name": "CommentLike",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c08d283-1e3d-4ea3-90a7-26ff84c8321c",
								"exec": [
									"pm.test(\"There is response body and it is not null\", function () {\r",
									"    var res = (_.isEmpty(responseBody));\r",
									"    pm.expect(res).to.be.false\r",
									"})\r",
									"\r",
									"pm.test(\"Assert that the count of likes are different than before\", function () {\r",
									"    pm.expect(parseInt(responseBody)).not.eq(pm.collectionVariables.get(\"CountOfCommentLikes\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/comments/2/likes",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"comments",
								"2",
								"likes"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetListOfAllComments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52c74833-f9d9-4dfb-a3a4-34e33f851c88",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Assert that ID of post is different than 0\", function () {\r",
									"        pm.expect(parseInt(jsonData.id)).not.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Assert that comment is not empty\", function () {\r",
									"        pm.expect(jsonData.description).not.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Assert that there is timestamp and is not empty\", function () {\r",
									"    pm.expect(jsonData.timestamp).not.null;\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"CommentOfPost\", jsonData.description);\r",
									"pm.collectionVariables.set(\"TimeStampOfCommentOfPost\", jsonData.timestamp);\r",
									"pm.collectionVariables.set(\"CommentIfPostID\", parseInt(jsonData.id));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/posts/2/comments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"2",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateComment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42f318e0-2211-4a9c-b830-646440709119",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Assert that new comment is different than previous\", function () {\r",
									"    pm.expect(jsonData.description).not.eql(pm.collectionVariables.get(\"CommentOfPost\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Assert that new comment is post in different time\", function () {\r",
									"    pm.expect(jsonData.timestamp).not.eql(pm.collectionVariables.get(\"TimeStampOfCommentOfPost\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Assert that comment ID is not equal to previous ID\", function () {\r",
									"    pm.expect(jsonData.id).not.eq(pm.collectionVariables.get(\"CommentIfPostID\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment\": \"{{$randomLoremSentences}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/posts/2/comments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"2",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetListOfLatest5Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "daebddcb-2c9a-4ab8-92e4-f817c7fbb4fc",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment ID is greater than 0\", function () {\r",
									"    pm.expect(jsonData.id).not.eq(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/posts/2/latest_comments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"2",
								"latest_comments"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Connections",
			"item": [
				{
					"name": "AuthenticationConnections",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5f08352-134a-4085-93a3-d435a6c9bf3a",
								"exec": [
									"pm.collectionVariables.set('SessionCookie', pm.cookies.get(\"JSESSIONID\"));\r",
									"\r",
									"console.log(pm.cookies.get(\"JSESSIONID\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{Admin_UserName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{Admin_Pass}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "SendConnectionRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71b7ec5b-7364-4318-8b78-ba1f1ef471a5",
								"exec": [
									"pm.test(\"Assert that response body is not empty\", function () {\r",
									"    var resB = (_.isEmpty(responseBody));\r",
									"    pm.expect(resB).to.be.false\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/connections/users/3",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"connections",
								"users",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRequestID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5a825ac0-1912-41d9-9c9b-438c020ca850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b2ad50c-09b0-4db8-9cda-bd668d32803e",
								"exec": [
									"var data = JSON.parse(responseBody); \r",
									"\r",
									"for (count = 0; count < data.length; count++)\r",
									"{\r",
									"    if (data[count].sender_id === 1 && data[count].receiver_id === 3)\r",
									"    {\r",
									"        var connectionID = data[count].connection_id;\r",
									"        postman.setEnvironmentVariable(\"ConnectionID\", connectionID);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/connections",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"connections"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetListOfAllUsersRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca6fc99b-1e00-482d-bfae-0f704cad9822",
								"exec": [
									"\r",
									"pm.test(\"Assert that response body is not empty\", function () {\r",
									"    var res = (_.isEmpty(responseBody));\r",
									"    pm.expect(res).to.be.false\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/connections/requests",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"connections",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetListOfAlConnectedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "161e443c-d280-439b-9703-8128e7d08d87",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Assert that response body is not empty\", function () {\r",
									"    var res = (_.isEmpty(responseBody));\r",
									"    pm.expect(res).to.be.false\r",
									"})\r",
									"pm.test(\"Body contains string\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"email\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody); \r",
									"\r",
									"for (count = 0; count < data.length; count++)\r",
									"{\r",
									"    var userID = data[count].id;\r",
									"    pm.test(\"Assert that the user ID is not empty\", function () {\r",
									"    pm.expect(userID).to.greaterThan(0);\r",
									"    });\r",
									"\r",
									"    var email = data[count].email;\r",
									"    pm.test(\"Assert that the user has entered email\", function () {\r",
									"    pm.expect(email).to.contain(\"@\");\r",
									"    });\r",
									"\r",
									"    var age = data[count].age;\r",
									"    pm.test(\"Assert that the age of the user is greater than 4\", function () {\r",
									"    pm.expect(age).to.greaterThan(4);\r",
									"    });\r",
									"};\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/connections/my",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"connections",
								"my"
							]
						}
					},
					"response": []
				},
				{
					"name": "ConfirmConnection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cdabb316-3bef-48b3-9981-3410af9788ee",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check connection sender ID\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Assert that there is an email shown\", function () {\r",
									"    pm.expect(jsonData.email).to.contain(\"@\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6cad3bf7-35dc-4d5e-a0b4-871f3f510c8c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/connections/{{ConnectionID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"connections",
								"{{ConnectionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteRejectConnection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a021b818-c2ca-4d3d-83bb-d32793d7d684",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"    \r",
									"pm.test(\"Assert that response body is not empty array\", function () {\r",
									"    pm.expect(jsonData).not.empty;\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody); \r",
									"\r",
									"for (count = 0; count < data.length; count++)\r",
									"{\r",
									"    var userID = data[count].id;\r",
									"    pm.test(\"Assert that the user ID is not empty\", function () {\r",
									"    pm.expect(userID).to.greaterThan(0);\r",
									"    });\r",
									"\r",
									"    var email = data[count].email;\r",
									"    pm.test(\"Assert that the user has entered email\", function () {\r",
									"    pm.expect(email).to.contain(\"@\");\r",
									"    });\r",
									"\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/connections/{{ConnectionID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"connections",
								"{{ConnectionID}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "AuthenticationUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcf3231f-8735-4be6-a0b4-2d24012ac23c",
								"exec": [
									"pm.collectionVariables.set('SessionCookie', pm.cookies.get(\"JSESSIONID\"));\r",
									"\r",
									"console.log(pm.cookies.get(\"JSESSIONID\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{Admin_UserName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{Admin_Pass}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18f9841c-9f65-492c-9ab1-ced478a143e4",
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.collectionVariables.set(\"idUser\", data[3].id);\r",
									"\r",
									"var data = JSON.parse(responseBody);   \r",
									"pm.collectionVariables.set(\"emailUser\", data[3].email);\r",
									"\r",
									"stringofnumbers = pm.collectionVariables.get(\"numberOfUsers\")\r",
									"var numberOfUsers = parseInt(stringofnumbers);\r",
									"\r",
									"pm.test(\"Assert if correct number of users is returned.\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);   \r",
									"pm.expect(jsonData.length).to.eql(numberOfUsers);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3921e99a-58bb-4126-9cd9-e81b3fbdecd3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "87dd9e93-d836-4941-8a96-c0559d4a866a",
								"exec": [
									"var id = pm.collectionVariables.get(\"idUser\");\r",
									"var userID = parseInt(id);\r",
									"\r",
									"pm.test(\"Assert user with the requested ID should be returned.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(id);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"initialUser\", pm.response.json());\r",
									"\r",
									"var userEmail = pm.collectionVariables.get(\"emailUser\");\r",
									"\r",
									"pm.test(\"Assert body matches \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(userEmail);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/users/{{idUser}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{idUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c1a64384-c8ea-4218-a268-0ee6fadfda0e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c193b11-6204-4290-8386-13b242a1d74c",
								"exec": [
									"initialUser = pm.collectionVariables.get(\"user\")\r",
									"\r",
									"pm.test(\"Assert updated user must be different than the initial.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).not.to.eql(initialUser);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "userProfilePicture.jpg"
								},
								{
									"key": "user",
									"type": "file",
									"src": "user.json"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/users/{{idUser}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{idUser}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e7dba06-4516-45b6-a49b-a8dd029c8340",
								"exec": [
									"userID = pm.collectionVariables.get(\"idUser\");\r",
									"\r",
									"pm.test(\"Assert user with the given ID must not be shown after deletion.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).not.to.eql(userID);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/users/{{idUser}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{idUser}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Nationalities",
			"item": [
				{
					"name": "AuthenticationNationalities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41a63379-b503-4110-b0ab-f9b4e82d1044",
								"exec": [
									"pm.collectionVariables.set('SessionCookie', pm.cookies.get(\"JSESSIONID\"));\r",
									"\r",
									"console.log(pm.cookies.get(\"JSESSIONID\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{Admin_UserName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{Admin_Pass}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show All Nationalities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78eda433-de44-41c4-b34d-37b6bf405f01",
								"exec": [
									"var number = pm.collectionVariables.get(\"numberOfNationalities\");\r",
									"var numberOfNationalities = parseInt(number);\r",
									"\r",
									"pm.test(\"Assert if 194 objects are returned.\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);   \r",
									"pm.expect(jsonData.length).to.eql(numberOfNationalities);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/admin/nationalities",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"nationalities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Nationality",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a115f7b-98f1-4dff-ad8a-d767d2883542",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202 ,200]);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"idNationality\" , pm.response.json().id)\r",
									"\r",
									"pm.collectionVariables.set(\"createdNationality\", pm.response.json());\r",
									"\r",
									"var nationalityTitle = pm.collectionVariables.get(\"nationalityTitle\")\r",
									"\r",
									"pm.test(\"Assert body data of a nationality should be returned.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.nationality).to.eql(nationalityTitle);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9316bc68-a8fa-4136-a294-482813c00626",
								"exec": [
									"var nationalityTitle = pm.collectionVariables.set(\"nationalityTitle\",\"Banani\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nationality\": \"{{nationalityTitle}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/nationalities",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"nationalities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Nationality",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a65d687-91e4-47e4-b45e-cf404176ef8d",
								"exec": [
									"var createdNationality = pm.collectionVariables.get(\"createdNationality\")\r",
									"\r",
									"pm.collectionVariables.set(\"nationalityTitle\" , pm.response.json().nationality)\r",
									"\r",
									"pm.test(\"Assert updated nationality must be different than the initial\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).not.to.eql(createdNationality);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\" : {{idNationality}},\r\n  \"nationality\": \"BananiUpdated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/nationalities",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"nationalities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Nationality",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40516556-c15c-4d1a-afff-d676ff7c3d22",
								"exec": [
									"var nationalityTitle = pm.collectionVariables.get(\"nationalityTitle\");\r",
									"\r",
									"pm.test(\"Assert nationality with the given Title must not be shown after deletion.\", function () {\r",
									"    pm.expect(pm.response.text()).not.to.include(nationalityTitle);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\" : 197,\r\n  \"nationality\": \"BananiUpdated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/nationalities/{{idNationality}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"nationalities",
								"{{idNationality}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "AuthenticationPosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4dafa590-ea89-4bf2-a880-8c15debefe13",
								"exec": [
									"pm.collectionVariables.set('SessionCookie', pm.cookies.get(\"JSESSIONID\"));\r",
									"\r",
									"console.log(pm.cookies.get(\"JSESSIONID\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{Admin_UserName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{Admin_Pass}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Public Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6e0cfcc-4c4d-4118-b1c3-8d42d14b14a6",
								"exec": [
									"pm.test(\"Assert if a public posts is returned.\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);   \r",
									"pm.expect(jsonData[1].visibility.type).to.eql(\"public\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/posts?category=1&page=0&size=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"posts"
							],
							"query": [
								{
									"key": "category",
									"value": "1"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create A Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "403ca95f-d703-4025-a27a-ae2186917fdd",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202 ,200]);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"createdPost\", pm.response.json());\r",
									"\r",
									"pm.collectionVariables.set(\"idPost\" , pm.response.json().id)\r",
									"idPost = pm.collectionVariables.get(\"idPost\")\r",
									"\r",
									"pm.test(\"Assert body data of a post should be returned.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(idPost);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "post",
									"type": "file",
									"src": "/C:/Users/ivang/Desktop/Final/zionalphaqaproject/Postman/post.json"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34357167-b12f-4c39-acfb-bc5242abd350",
								"exec": [
									"var idPost = pm.collectionVariables.get(\"idPost\");\r",
									"\r",
									"pm.test(\"Assert the requested post with the given id is returned.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(idPost);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/posts/{{idPost}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"{{idPost}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update A Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3206927-f27d-477c-9798-ea185c30ffd1",
								"exec": [
									"createdPost = pm.collectionVariables.get(\"createdPost\")\r",
									"\r",
									"pm.test(\"Assert updated post must be different than the initial.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).not.to.eql(createdPost);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "post",
									"type": "file",
									"src": "/C:/Users/ivang/Desktop/Final/zionalphaqaproject/Postman/REpost.json"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/ivang/Desktop/Final/zionalphaqaproject/Postman/postImage.png"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/posts/{{idPost}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"{{idPost}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show Post's Likes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "614b73b2-a61c-44f9-8be3-42883013d244",
								"exec": [
									"pm.collectionVariables.set(\"isInteger\" ,pm.response.json());\r",
									"var isInteger = Number.isInteger(pm.collectionVariables.get(\"isInteger\"));\r",
									"\r",
									"pm.test(\"Assert a number should be returned.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Number.isInteger(jsonData)).to.eql(isInteger);\r",
									"});\r",
									"pm.collectionVariables.set(\"numLikes\" , pm.response.json())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/posts/{{idPost}}/likes",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"{{idPost}}",
								"likes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like A Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "648bab25-6d31-485f-9e5f-f08b60877501",
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201,202]);\r",
									"});\r",
									"\r",
									"var initialLikes = pm.collectionVariables.get(\"numLikes\");\r",
									"\r",
									"pm.test(\"Assert likes Must Be More Than The Initial.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).greaterThan(initialLikes);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/posts/{{idPost}}/likes",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"{{idPost}}",
								"likes"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Of My Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0493c2cf-cebf-4311-9a32-14b91e98a1d1",
								"exec": [
									"var creator = pm.collectionVariables.get(\"Admin_UserName\");\r",
									"\r",
									"pm.test(\"Assert if post of the given user is returned.\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);   \r",
									"pm.expect(jsonData[0].creator.email).to.eql(creator);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/posts/my?page=1&size=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"my"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Of Top 3 Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0ea894b-2f02-41a9-aeec-36060b1eb514",
								"exec": [
									"pm.test(\"Assert if 3 objects are returned.\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);   \r",
									"pm.expect(jsonData.length).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/posts/top",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"top"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete A Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7354228a-3ccd-489c-aeb5-65825fcc929c",
								"exec": [
									"createdIdPost = pm.collectionVariables.get(\"idPost\");\r",
									"\r",
									"pm.test(\"Assert post with the given ID must not be shown after deletion.\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).not.to.eql(createdIdPost);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/posts/{{idPost}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"{{idPost}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "830df001-77b6-4585-8978-2990ed19ece8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7d063cfe-1038-4551-b61b-9a2ced1a3efe",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "c4eaf825-8df6-4eb5-b634-8ca2e1e7b892",
			"key": "CommentDesc",
			"value": "Esse aliquid laudantium rerum ea provident enim voluptatem."
		},
		{
			"id": "5a1b0144-9044-4b0a-9dd1-24025aeb358a",
			"key": "CommentedPostID",
			"value": "4"
		},
		{
			"id": "eed045ff-f7cb-45d9-8ba1-9362a709ebc1",
			"key": "CommentCreatorID",
			"value": "1"
		},
		{
			"id": "aaa8d044-cbc0-4033-9813-faf4e2c650c9",
			"key": "CategoryID",
			"value": ""
		},
		{
			"id": "064f5afd-86de-4d89-8a73-50e8374e281e",
			"key": "CountOfCommentLikes",
			"value": "1"
		},
		{
			"id": "0ee3c2d2-479a-47ce-9b4c-ab5b32a8b497",
			"key": "CommentOfPost",
			"value": ""
		},
		{
			"id": "81e2b6aa-99e8-412c-ae5e-adda30f5e698",
			"key": "TimeStampOfCommentOfPost",
			"value": ""
		},
		{
			"id": "97832c9e-2e4f-472a-a067-4066688a41ae",
			"key": "ConnectionID",
			"value": ""
		},
		{
			"id": "502ead8e-258c-4c75-8679-0bc2872e3efd",
			"key": "CommentIfPostID",
			"value": ""
		},
		{
			"id": "f7d0923c-d6c7-4669-a3dd-bbced0438b01",
			"key": "Admin_UserName",
			"value": "zionalpha22qa@gmail.com"
		},
		{
			"id": "6f5f3ff4-d850-4f1d-b6d3-5db31aa1e674",
			"key": "Admin_Pass",
			"value": "telerikAlphaQA22$"
		},
		{
			"id": "e4d638e7-1150-4daf-b047-2fb3073a098e",
			"key": "SessionCookie",
			"value": ""
		},
		{
			"id": "4728aa4f-f9cc-46a5-bc09-6bb3e81ede46",
			"key": "numberOfUsers",
			"value": "4"
		},
		{
			"id": "9c951092-dd9b-431e-b223-563c2fdd69fc",
			"key": "numberOfNationalities",
			"value": "194"
		},
		{
			"id": "b74de177-de7c-4147-9393-b72198ae3a64",
			"key": "nationalityTitle",
			"value": "Banani"
		},
		{
			"id": "3082d39a-8194-472b-8b03-c89e458e18c0",
			"key": "createdNationality",
			"value": ""
		},
		{
			"id": "8459b130-edc6-473a-9438-e36583f2ad44",
			"key": "idNationality",
			"value": ""
		},
		{
			"id": "ccca574d-cc98-44b6-a542-02570c590e7d",
			"key": "initialUser",
			"value": ""
		},
		{
			"id": "5224a5d4-6a53-44ed-b5e6-2fdf6af7bcb8",
			"key": "idUser",
			"value": ""
		},
		{
			"id": "768bbd34-e005-45a4-b3f9-d98e2e3e8d79",
			"key": "createdPost",
			"value": ""
		},
		{
			"id": "efa25a0f-2ac7-42ad-9a4b-559b78df27cb",
			"key": "idPost",
			"value": ""
		},
		{
			"id": "56580b98-fc2f-436c-8b31-e4b2adea8e7d",
			"key": "numLikes",
			"value": ""
		},
		{
			"id": "960ad10e-b601-4b0b-9ccc-c49fc585faf1",
			"key": "isInteger",
			"value": ""
		},
		{
			"id": "314359a6-a9eb-4da2-a799-258eb0fc372b",
			"key": "emailUser",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}